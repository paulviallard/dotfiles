#!/usr/bin/env python3
# Copyright Â© 2022 Paul Viallard <paul.viallard@gmail.com>
# This work is free. You can redistribute it and/or modify it under the
# terms of the Do What The Fuck You Want To Public License, Version 2,
# as published by Sam Hocevar. See http://www.wtfpl.net/ for more details.

from os import listdir, stat, makedirs, getcwd
from os.path import exists, isdir, isfile, join, dirname
from datetime import datetime
from argparse import ArgumentParser
from shutil import move
from importlib.machinery import SourceFileLoader
from importlib.util import spec_from_loader, module_from_spec

###############################################################################

ARCHIVE_BIN = {
    b"\x00": "year",
    b"\x01": "date",
    b"\x02": "time",
    b"\x03": "-",
    b"\x04": "/",
    b"\x05": "dir",
    b"\x06": "",
}

# Import the amkdir function
loader = SourceFileLoader("amkdir", join(dirname(__file__), "amkdir"))
spec = spec_from_loader("amkdir", loader)
amkdir = module_from_spec(spec)
loader.exec_module(amkdir)
get_archive_type = amkdir.get_archive_type
is_archive_dir = amkdir.is_archive_dir

###############################################################################


def move_file_archive(file_path, archive_path, archive_type):

    # We get the time of the file creation
    time = stat(file_path).st_mtime
    date = datetime.fromtimestamp(time)
    year = "{}".format(date.year)
    month = "{:02d}".format(date.month)
    day = "{:02d}".format(date.day)
    h = "{:02d}".format(date.hour)
    min = "{:02d}".format(date.minute)

    # We get the path from the .archive file
    dir_path = ""
    for c in archive_type:
        if(c == "year"):
            dir_path += year
        elif(c == "date"):
            dir_path += month+"-"+day
        elif(c == "time"):
            dir_path += h+"-"+min
        elif(c == "dir"):
            dir_path = dir_path[:-1]
        else:
            dir_path += c
    path = join(archive_path, dir_path)

    # We create the directories and move the file
    makedirs(path, exist_ok=True)
    move(file_path, path)


def list_file_dir(path):

    # We create the file list
    file_list = []

    # For each file/directories in the path
    for file_dir in listdir(path):
        file_dir_path = join(path, file_dir)
        file_bool, dir_bool = is_file_dir(file_dir_path)

        # If the path correspond to a file
        if(file_bool):
            # We append to the list
            file_list.append(file_dir_path)

        # If the path correspond to a directory
        elif(dir_bool):
            # We append concatenate the list of the directory
            file_list += list_file_dir(file_dir_path)

    return file_list


def is_file_dir(path):
    # Test if a path corresponds to a file or a directory
    if(not(exists(path))):
        return False, False
    if(isfile(path)):
        return True, False
    if(isdir(path)):
        return False, True
    return False, False

###############################################################################


def asort(source_path, archive_path):

    file_source_bool, dir_source_bool = is_file_dir(source_path)
    archive_path = join(getcwd(), archive_path)

    # We test if the directory correspond to an archive
    if(not(is_archive_dir(archive_path))):
        arg_parser.error(f"{archive_path} must be an archive")

    # We get the type of the archive
    archive_type = get_archive_type(archive_path)

    # We move the files
    if(file_source_bool):
        move_file_archive(source_path, archive_path, archive_type)
    elif(dir_source_bool):
        source_path_list = list_file_dir(source_path)
        for source_path in source_path_list:
            move_file_archive(source_path, archive_path, archive_type)
    else:
        arg_parser.error(f"{source_path} must be a file or a directory")

###############################################################################


if __name__ == "__main__":

    # We create the parser
    arg_parser = ArgumentParser(
        description="move the source files in the archive")
    arg_parser.add_argument(
        "source", metavar="source", type=str,
        help="path of the source directory"
    )
    arg_parser.add_argument(
        "archive", metavar="archive", type=str,
        help="path of the archive directory"
    )
    arg_list = arg_parser.parse_args()

    source_path = arg_list.source
    archive_path = arg_list.archive
    asort(source_path, archive_path)
