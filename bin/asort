#!/usr/bin/env python3
# Copyright Â© 2021 Paul Viallard <paul.viallard@gmail.com>
# This work is free. You can redistribute it and/or modify it under the
# terms of the Do What The Fuck You Want To Public License, Version 2,
# as published by Sam Hocevar. See http://www.wtfpl.net/ for more details.

from os import listdir, stat, makedirs
from os.path import exists, isdir, isfile, join, split
from datetime import datetime
from argparse import ArgumentParser
from shutil import move

###############################################################################

if __name__ == "__main__":
    ARCHIVE_BIN = {
        b"\x00": "year",
        b"\x01": "date",
        b"\x02": "datetime",
        b"\x03": "year-date",
        b"\x04": "year-datetime"
    }

    # We create the parser
    arg_parser = ArgumentParser(
        description="move the source files in the archive")
    arg_parser.add_argument(
        "source", metavar="source", type=str,
        help="path of the source directory"
    )
    arg_parser.add_argument(
        "archive", metavar="archive", type=str,
        help="path of the archive directory"
    )

###############################################################################


def move_file_archive(
    file_path, archive_path, archive_type
):

    # We
    time = stat(file_path).st_mtime
    date = datetime.fromtimestamp(time)
    year = "{}".format(date.year)
    month = "{:02d}".format(date.month)
    day = "{:02d}".format(date.day)
    h = "{:02d}".format(date.hour)
    min = "{:02d}".format(date.minute)

    _, file_name = split(file_path)

    if(archive_type == "year"):
        file_archive_path = join(
            archive_path, year+"/"+file_name)
    elif(archive_type == "date"):
        file_archive_path = join(
            archive_path, year+"-"+month+"-"+day+"/"+file_name)
    elif(archive_type == "datetime"):
        file_archive_path = join(
            archive_path, year+"-"+month+"-"+day+"-"+h+"-"+min+"/"+file_name)
    elif(archive_type == "year-date"):
        file_archive_path = join(
            archive_path, year+"/"+year+"-"+month+"-"+day+"/"+file_name)
    elif(archive_type == "year-datetime"):
        file_archive_path = join(
            archive_path, (
                year+"/"+year+"-"+month+"-"+day+"-"+h+"-"+min+"/"+file_name))
    else:
        arg_parser.error("type must be either year, date or datetime")

    dir_name, _ = split(file_archive_path)
    makedirs(dir_name, exist_ok=True)
    move(file_path, file_archive_path)
    #  rename(file_path, file_archive_path)


def list_file_dir(path):
    file_list = []

    for file_dir in listdir(path):
        file_dir_path = join(path, file_dir)
        file_bool, dir_bool = is_file_dir(file_dir_path)

        if(file_bool):
            file_list.append(file_dir_path)
        elif(dir_bool):
            file_list += list_file_dir(file_dir_path)

    return file_list


def is_file_dir(path):
    # Test if a path corresponds to a file or a directory
    if(not(exists(path))):
        return False, False
    if(isfile(path)):
        return True, False
    if(isdir(path)):
        return False, True
    return False, False


def get_archive_type(path):
    archive_path = join(path, ".archive")
    f = open(archive_path, 'rb')
    c = f.read(1)
    if(c not in ARCHIVE_BIN):
        arg_parser.error(".archive is corrupted")
    f.close()
    return ARCHIVE_BIN[c]

###############################################################################


def main():

    arg_list = arg_parser.parse_args()

    source_path = arg_list.source
    archive_path = arg_list.archive

    file_source_bool, dir_source_bool = is_file_dir(source_path)
    file_archive_bool, dir_archive_bool = is_file_dir(archive_path)

    if(not(dir_archive_bool)):
        arg_parser.error(archive_path+" is not an archive")

    # We get the type of the archive (year, date or datetime)
    archive_type = get_archive_type(archive_path)

    if(file_source_bool):
        move_file_archive(source_path, archive_path, archive_type)
    elif(dir_source_bool):
        source_path_list = list_file_dir(source_path)
        for source_path in source_path_list:
            move_file_archive(source_path, archive_path, archive_type)
    else:
        arg_parser.error(source_path+" must be a file or a directory")


if __name__ == "__main__":
    main()
