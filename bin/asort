#!/usr/bin/env python3
# Copyright Â© 2017 Paul Viallard <paul.viallard@gmail.com>
# This work is free. You can redistribute it and/or modify it under the
# terms of the Do What The Fuck You Want To Public License, Version 2,
# as published by Sam Hocevar. See http://www.wtfpl.net/ for more details.

import sys
from os import listdir, stat, rename, makedirs
from os.path import exists, isdir, isfile, join, split
from datetime import datetime
from getopt import getopt


def move_file_archive(file_path, archive_path, short_archive=False):

    file_modification_time = stat(file_path).st_mtime
    file_modification_date = datetime.fromtimestamp(file_modification_time)
    file_modification_year = "{}".format(file_modification_date.year)
    file_modification_month = "{:02d}".format(file_modification_date.month)
    file_modification_day = "{:02d}".format(file_modification_date.day)

    create_directory_archive(
        archive_path,
        file_modification_year,
        file_modification_month,
        file_modification_day,
        short_archive
    )

    _, file_name = split(file_path)

    if(not(short_archive)):
        file_archive_path = join(
            archive_path,
            file_modification_year + "/"
            + file_modification_month + "/"
            + file_modification_day + "/"
            + file_name
        )
    else:
        file_archive_path = join(
            archive_path,
            file_modification_year + "/"
            + file_name
        )

    rename(file_path, file_archive_path)


def create_directory_archive(path, year, month, day, short_archive=False):
    year_path = join(path, year)
    month_path = join(year_path, month)
    day_path = join(month_path, day)

    if(not(exists(year_path))):
        makedirs(year_path)
    if(not(short_archive) and not(exists(month_path))):
        makedirs(month_path)
    if(not(short_archive) and not(exists(day_path))):
        makedirs(day_path)

    if(not(isdir(year_path))):
        error(year_path+" is not a directory")
    if(not(short_archive) and not(isdir(month_path))):
        error(month_path+" is not a directory")
    if(not(short_archive) and not(isdir(day_path))):
        error(day_path+" is not a directory")


def list_file_directory(path, recursive=False):
    file_list = []

    for file_directory in listdir(path):
        file_directory_path = join(path, file_directory)
        file_bool, directory_bool = is_file_directory(file_directory_path)

        if(file_bool):
            file_list.append(file_directory_path)
        elif(directory_bool and recursive):
            file_list += list_file_directory(
                file_directory_path, recursive=recursive
            )

    return file_list


def is_file_directory(path):
    if(not(exists(path))):
        return False, False
    if(isfile(path)):
        return True, False
    if(isdir(path)):
        return False, True
    return False, False


def usage():
    print("Usage: {} source target".format(sys.argv[0]))
    sys.exit(-1)


def error(message):
    print("Error: "+str(message))
    sys.exit(-1)


def get_opt_arg():
    opt_list, arg_list = getopt(
        sys.argv[1:], "hrs", ["help", "recursive", "short"]
    )

    if(len(arg_list) != 2):
        usage()

    source_directory = arg_list[0]
    target_directory = arg_list[1]

    recursive_bool = False
    short_bool = False

    for opt, _ in opt_list:
        if(opt == "--recursive" or opt == "-r"):
            recursive_bool = True
        elif(opt == "--short" or opt == "-s"):
            short_bool = True
        elif(opt == "--help" or opt == "-h"):
            usage()

    return recursive_bool, short_bool, source_directory, target_directory


def main():
    recursive_bool, short_bool, source_path, target_path = get_opt_arg()
    file_source_bool, directory_source_bool = is_file_directory(source_path)
    file_target_bool, directory_target_bool = is_file_directory(target_path)

    if(not(directory_target_bool)):
        error(target_path+" is not a directory")

    if(file_source_bool):
        move_file_archive(
            source_path, target_path, short_archive=short_bool
        )
    elif(directory_source_bool):
        source_path_list = list_file_directory(
            source_path, recursive=recursive_bool
        )
        for source_path in source_path_list:
            move_file_archive(
                source_path, target_path, short_archive=short_bool
            )
    else:
        error(source_path+" must be a file or a directory")

    sys.exit(0)


main()
