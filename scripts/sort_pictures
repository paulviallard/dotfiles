#!/usr/bin/env perl
# Copyright Â© 2017 Paul Viallard <paul.viallard@gmail.com>
# This work is free. You can redistribute it and/or modify it under the
# terms of the Do What The Fuck You Want To Public License, Version 2,
# as published by Sam Hocevar. See http://www.wtfpl.net/ for more details.

package Sort;

use strict;
use warnings;

use File::Copy;
use File::Path;

# We instanciate a new object Sort
sub new($$) {
  my ($class, $target_directory) = @_;
  my $this = {
    target_directory => $target_directory,
  };
  return bless $this, $class;
}

# We move the file in the target directory
sub move_file($$$) {
  my ($this, $source, $directory) = @_;
  my $target_directory = $this->{target_directory};
  my $picture = $source;
  $picture =~ s/.*\/(.*)$/$1/g;
  die("Error: $target_directory/$directory/$picture already exists\n") if(-f "$target_directory/$directory/$picture");
  move("$source","$target_directory/$directory") or die("Error: $target_directory/$directory doesn't exist\n");
}

# We create the needed directories
sub create_directory($$) {
  my ($this, $path) = @_;
  my $target_directory = $this->{target_directory};
  (my $parent_directory, my $directory) = split(/\//,$path);
  if(! -d "$target_directory") {
    mkdir "$target_directory" or die("Error: Failed to create $target_directory\n");
  }

  if(! -d "$target_directory/$parent_directory") {
    mkdir "$target_directory/$parent_directory" or die("Error: Failed to create $target_directory/$parent_directory\n");
    mkdir "$target_directory/$parent_directory/$directory" or die("Error: Failed to create $target_directory/$parent_directory/$directory\n");
  }
  if(! -d "$target_directory/$parent_directory/$directory") {
    mkdir "$target_directory/$parent_directory/$directory" or die("Erreur: Failed to create $target_directory/$parent_directory/$directory\n");
  }
}

# We give the path of the directory
sub give_name_directory($$) {
  my ($this, $file) = @_;
  my $modification = (stat $file)[9];
  my @month = qw(01 02 03 04 05 06 07 08 09 10 11 12);
  (undef,undef,undef,my $day,my $month_index,my $year,undef,undef,undef) = localtime($modification);
  $day =~ s/^([1-9])$/0$1/g;
  $year += 1900;
  return "$year/$year-$month[$month_index]-$day";
}

# The script 
my $source_directory = shift or die("Usage: $0 source target\n");
my $target_directory = shift or die("Usage: $0 source target\n");
my @source_list = <$source_directory/*>;

foreach my $source (@source_list) {
  if(-f $source) {
    my $sort = new Sort($target_directory);
    my $directory = $sort->give_name_directory($source);
    $sort->create_directory($directory);
    $sort->move_file($source, $directory);
  }
}
