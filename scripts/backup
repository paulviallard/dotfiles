#!/usr/bin/env perl
# Copyright Â© 2017 Paul Viallard <paul.viallard@gmail.com>
# This work is free. You can redistribute it and/or modify it under the
# terms of the Do What The Fuck You Want To Public License, Version 2,
# as published by Sam Hocevar. See http://www.wtfpl.net/ for more details.

package Backup;

use strict;
use warnings;

# We instanciate a new object Backup
sub new($) {
  my ($class) = @_;
  my $this = {};
  return bless $this, $class;
}

# We set the backup directory
sub set_directory($$) {
  my ($this, $directory) = @_;
  $this->{directory} = $directory;
}

# We set the directory that we want exclude
sub set_exclude($$) {
  my ($this, $exclude) = @_;
  $this->{exclude} = $exclude; 
}

# We set the connection to the backup server
sub set_connection($$$$) {
  my ($this, $username, $server, $server_directory) = @_;
  my $date = time();

  $this->{username} = $username;
  $this->{server} = $server;
  $this->{server_directory} = $server_directory;

  $this->{backup_directory} = $this->{server_directory};
  $this->{backup_directory} =~ s#([^/]+)$#.backup_$1#;

  $this->{backup_subdirectory} = $this->{backup_directory}."/"."backup-".$date;

  $this->{backup_tmp} = $this->{backup_subdirectory};
  $this->{backup_tmp} =~ s#([^/]+)$#tmp_$1#;
}

# We set the maximum of backup for a directory in the server
sub set_max_backup($$) {
  my ($this, $max_backup) = @_;
  $this->{max_backup} = $max_backup;
}

# We synchronize 
sub sync($) {
  my ($this) = @_;
  die("Error: max backup missing\n") if(!defined($this->{max_backup}));
  die("Error: directory missing\n") if(!defined($this->{directory}));
  die("Error: exclude missing\n") if(!defined($this->{exclude}));
  die("Error: connection missing\n") if((!defined($this->{username})) || (!defined($this->{server})) || (!defined($this->{server_directory})));

  open SYNC, "-|", "ssh", "$this->{username}\@$this->{server}", "mkdir -p \"$this->{backup_directory}\"";
  close SYNC;

  open SYNC, "-|", "rsync",
  "-azP", 
  "--delete",
  "--delete-excluded",
  "--exclude-from=$this->{exclude}",
  "--link-dest=$this->{server_directory}",
  "$this->{directory}",
  "$this->{username}\@$this->{server}:$this->{backup_tmp}";
  while(<SYNC>) {
    print $_;
  }
  close SYNC;

  open SYNC, "-|", "ssh", "$this->{username}\@$this->{server}", "mv \"$this->{backup_tmp}\" \"$this->{backup_subdirectory}\"; rm -f \"$this->{server_directory}\"; ln -s \"$this->{backup_subdirectory}\" \"$this->{server_directory}\"; cd \"$this->{backup_directory}\"; rm -rf \$(if ((\$(ls | wc -l) >= $this->{max_backup})); then ls | sort -r | tail -n \$((\$(ls | wc -l)-$this->{max_backup})); fi)";
  close SYNC;
}

# The usage function 
sub usage() {
  print "Usage: $0 directory exclude max_backup user server backup_directory\n";
}

# The script
my $size = $#ARGV+1; 
if($size != 6) {
  usage();
} else {
  my $backup = new Backup;
  $backup->set_max_backup($ARGV[2]);
  $backup->set_directory($ARGV[0]);
  $backup->set_exclude($ARGV[1]);
  $backup->set_connection($ARGV[3], $ARGV[4], $ARGV[5]);
  $backup->sync();
}
